In go, every functionality comes from packages. 
main package is the main function packgae which is the entry point in go. 
fmt is the format library where we cnd find multiple packages like input and output functionality.
main function is the entry point in Go.

whenever we use multiple variables in text we can use Printf function from the formate package for formated text. 
    in the text %v for placeholder which print the value of the variable. (default, for other variables has other placeholders)
    %T will print the type of the variable.

after creating the project we have to initialize the go project as a module(which will create a project configuration file called go.mod, where all the confucuration of the project will be noted )
    command: go mod init <project path>

Syntactic Sugar in Go
    A term to describe a feature in a language that let's you do something more easily
    Makes the language "sweeter" for human use.
    But doesn't add any new functionality that it didn't already have.
    cannot use to declear a constant variable, or any explicitly different type.

Arrays: data structures to store collection of elements in a single variable
    fixed size
    only the same data type can be stored
    len() for array length

Slices: is an abstraction of an Array. define array without specific size. dynamic in size.
    we don't need to specify a size at the beginning
    automatically expands when new elements are added
    more flexible and powerful
    example: 
        var bookings []string
        var bookings = []string{}
        booking := []string{}

loop: go has only for loop syntex. 
Range: range iterates over elements for different data structure (so not only arrays and slices).
    For arrays and slices, range provides the index and value for each element.

strings.Fields() : Splits the string with white space as separator. 
    and returns a slice with the split elements

Blank Identifier: using (_). To ignore a variable you don't want to use. 
    So with Go you need to make unused variables explicitly






